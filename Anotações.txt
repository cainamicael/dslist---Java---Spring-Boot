Aula 01

Objetivo:

- Criar projeto / lib Maven
- Salvar no Github
- Arquivos Properties, entidade Game, ORM- Seed dos games
- GameMinDTO, GameRepository, GameService, GameController

Criar projeto: https://start.spring.io/
Maven e java 17

Dependências: Spring Web, JPA (para mecher com banco de dados), h2 (banco de dados em memória), postgreSql (bd para implantar na nuvem)

Lib maven: Colar no pom.xml (dps, botão direito na pasta root, maven, update e marca o force update)

	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-resources-plugin</artifactId>
		<version>3.1.0</version> <!--$NO-MVN-MAN-VER$ -->
	</plugin>


Configurando o arquivo application.properties:

	spring.profiles.active=${APP_PROFILE:test}
	spring.jpa.open-in-view=false

	cors.origins=${CORS_ORIGINS:http://localhost:5173,http://localhost:3000}

Fazendo ORM:

Perfil de testes (Configurações do banco de dados de teste (H2)):

Criando o application-test.properties:

	# H2 Connection
	spring.datasource.url=jdbc:h2:mem:testdb
	spring.datasource.username=sa
	spring.datasource.password=

	# H2 Client
	spring.h2.console.enabled=true
	spring.h2.console.path=/h2-console

	# Show SQL
	spring.jpa.show-sql=true
	spring.jpa.properties.hibernate.format_sql=true

Criando classe Game (entidade) no pacote entities (src/main/java):

Notations usadas (para importar, damos ctrl + shift + o):

	@Entity
	@Table(name = 'tb_game')
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "game_year") //Para que no banco, o nome não fique year, pois dá conflito
	@Column(columnDefinition = "TEXT") //Para dizer que não vai ser vaschar, e sim text

Classe:

	package com.devsuperior.dslist.entities;

	import java.util.Objects;

	import jakarta.persistence.Column;
	import jakarta.persistence.Entity;
	import jakarta.persistence.GeneratedValue;
	import jakarta.persistence.GenerationType;
	import jakarta.persistence.Id;
	import jakarta.persistence.Table;

	@Entity
	@Table(name = "tb_game")
	public class Game {
		
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private Long id;
		private String title;
		
		@Column(name = "game_year") //Para que no banco, o nome não fique year, pois dá conflito
		
		private Integer year;
		private String genre;
		private String platforms;
		private Double score;
		private String imgUrl;
		
		@Column(columnDefinition = "TEXT") //Para dizer que não vai ser vaschar, e sim text
		private String shortDescription;
		
		@Column(columnDefinition = "TEXT") //Para dizer que não vai ser vaschar, e sim text
		private String longDescription;
		
		public Game() {}

		public Game(Long id, String title, Integer year, String genre, String platforms, Double score, String imgUrl,
				String shortDescription, String longDescription) {
			this.id = id;
			this.title = title;
			this.year = year;
			this.genre = genre;
			this.platforms = platforms;
			this.score = score;
			this.imgUrl = imgUrl;
			this.shortDescription = shortDescription;
			this.longDescription = longDescription;
		}

		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		public Integer getYear() {
			return year;
		}

		public void setYear(Integer year) {
			this.year = year;
		}

		public String getGenre() {
			return genre;
		}

		public void setGenre(String genre) {
			this.genre = genre;
		}

		public String getplatforms() {
			return platforms;
		}

		public void setplatforms(String platforms) {
			this.platforms = platforms;
		}

		public Double getScore() {
			return score;
		}

		public void setScore(Double score) {
			this.score = score;
		}

		public String getImgUrl() {
			return imgUrl;
		}

		public void setImgUrl(String imgUrl) {
			this.imgUrl = imgUrl;
		}

		public String getshortDescription() {
			return shortDescription;
		}

		public void setshortDescription(String shortDescription) {
			this.shortDescription = shortDescription;
		}

		public String getLongDescription() {
			return longDescription;
		}

		public void setLongDescription(String longDescription) {
			this.longDescription = longDescription;
		}
		
		//Compara se os games são iguais ou não
		
		@Override
		public int hashCode() {
			return Objects.hash(id);
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Game other = (Game) obj;
			return Objects.equals(id, other.id);
		}
		
	}

Acessando o banco h2: http://localhost:8080/h2-console

Fazendo seed (semeando o banco de dados):

resources/import.sql

	INSERT INTO tb_game (title, score, game_year, genre, platforms, img_url, short_description, long_description) VALUES ('Mass Effect Trilogy', 4.8, 2012, 'Role-playing (RPG), Shooter', 'XBox, Playstation, PC', 'https://raw.githubusercontent.com/devsuperior/java-spring-dslist/main/resources/1.png', 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Odit esse officiis corrupti unde repellat non quibusdam! Id nihil itaque ipsum!', 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus dolorum illum placeat eligendi, quis maiores veniam. Incidunt dolorum, nisi deleniti dicta odit voluptatem nam provident temporibus reprehenderit blanditiis consectetur tenetur. Dignissimos blanditiis quod corporis iste, aliquid perspiciatis architecto quasi tempore ipsam voluptates ea ad distinctio, sapiente qui, amet quidem culpa.');

	INSERT INTO tb_game (title, score, game_year, genre, platforms, img_url, short_description, long_description) VALUES ('Red Dead Redemption 2', 4.7, 2018, 'Role-playing (RPG), Adventure', 'XBox, Playstation, PC', 'https://raw.githubusercontent.com/devsuperior/java-spring-dslist/main/resources/2.png', 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Odit esse officiis corrupti unde repellat non quibusdam! Id nihil itaque ipsum!', 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus dolorum illum placeat eligendi, quis maiores veniam. Incidunt dolorum, nisi deleniti dicta odit voluptatem nam provident temporibus reprehenderit blanditiis consectetur tenetur. Dignissimos blanditiis quod corporis iste, aliquid perspiciatis architecto quasi tempore ipsam voluptates ea ad distinctio, sapiente qui, amet quidem culpa.');

Vou criar uma classe mostrando somente alguns dados dos games, sem precisar mostrar tudo. Dados projetados. esta classe será um DTO (No pacote .dto):

Princípio básico:

	public GameMinDTO(Game entity) { //Irei instanciar a partir de um obj game
		this.id = entity.getId(); //O this é opcional, já que não tem parâmetros de nomes repetidos 
		this.title = entity.getTitle();
		this.year = entity.getYear();
		this.imgUrl = entity.getImgUrl();
		this.shortDescription = entity.getshortDescription();
	}

Só preciso de getters no DTO

Classe GameMinDTO:

	package com.devsuperior.dslist.dto;

	import com.devsuperior.dslist.entities.Game;

	public class GameMinDTO {
		
		private Long id;
		private String title;
		private Integer year;
		private String imgUrl;
		private String shortDescription;
		
		public GameMinDTO() {
		}

		public GameMinDTO(Game entity) { //Irei instanciar a partir de um obj game
			this.id = entity.getId();
			this.title = entity.getTitle();
			this.year = entity.getYear();
			this.imgUrl = entity.getImgUrl();
			this.shortDescription = entity.getshortDescription();
		}

		public Long getId() {
			return id;
		}

		public String getTitle() {
			return title;
		}

		public Integer getYear() {
			return year;
		}

		public String getImgUrl() {
			return imgUrl;
		}

		public String getShortDescription() {
			return shortDescription;
		}
		
	}

Repository: Objeto responsável por fazer consultas a dados - tem a parte de inserir, deletar...

Criando repository: Criaremos uma INTERFACE no Patote .repositories

Usaremos como primeiro parâmetro a classe, e como segundo, o tipo primitivo do id

	package com.devsuperior.dslist.repositories;

	import org.springframework.data.jpa.repository.JpaRepository;

	import com.devsuperior.dslist.entities.Game;

	public interface GameRepository extends JpaRepository<Game, Long>{

	}

Service: Componente responsável por implementar as lógicas de negócio

Criando serciço: pacote .services a classe GameService

Notations:

	@Service //Ou @Component
	@Autowired //Para injetar uma instancia do game repository

Transformando os games em DTO:

	@Autowired //Para injetar uma instancia do game repository
	private GameRepository gameRepository;
	
	public List<GameMinDTO> findAll() {
		//Pegamos todos os games
		List<Game> result = gameRepository.findAll(); //Recebe tudo do bd
		
		//Tratando nosso resultado, resumindo as informações para nosso dto
		List<GameMinDTO> dto = result.stream().map(x -> new GameMinDTO(x)).toList();
		return dto;
	}

Classe GameService:

	package com.devsuperior.dslist.services;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;

	import com.devsuperior.dslist.dto.GameMinDTO;
	import com.devsuperior.dslist.entities.Game;
	import com.devsuperior.dslist.repositories.GameRepository;

	@Service //Ou @Component
	public class GameService {
		
		@Autowired //Para injetar uma instancia do game repository
		private GameRepository gameRepository;
		
		public List<GameMinDTO> findAll() {
			//Pegamos todos os games
			List<Game> result = gameRepository.findAll(); //Recebe tudo do bd
			
			//Tratando nosso resultado, resumindo as informações para nosso dto
			List<GameMinDTO> dto = result.stream().map(x -> new GameMinDTO(x)).toList();
			return dto;
		}
		
	}


Criando controller: Porta de entrada do nosso backend. Ele vai disponibilizar nossa api

Criando classe GameController no pacote .controllers:

Notations: 

	@RestController
	@RequestMapping(value = "/games") //O caminho que vai ser requisitado da minha api
	@Autowired
	@GetMapping

Classe: retorna na url: localhost:8080/games

	package com.devsuperior.dslist.controllers;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;

	import com.devsuperior.dslist.dto.GameMinDTO;
	import com.devsuperior.dslist.services.GameService;

	@RestController
	@RequestMapping(value = "/games") //O caminho que vai ser requisitado da minha api
	public class GameController {

		@Autowired
		private GameService gameService;
		
		@GetMapping
		public List<GameMinDTO> findAll() {
			List<GameMinDTO> result = gameService.findAll();
			return result;
		}
			
	}

Resumo da aula 01:

O que você aprendeu:
• Conceitos
• Sistemas web e recursos
• Cliente/servidor, HTTP, JSON
• Padrão Rest para API web
• Estruturação de projeto Spring Rest
• Entidades e ORM
• Database seeding
• Padrão camadas
• Controller, service, repository
• Padrão DTO





















































Aula 02:

O que será visto?

- Implementar modelo de domínio
- Atualizar seed da base de dados
- GameDTO, busca game por id
- Busca totas listas em /lists
- Consulta SQL, projection, busca de games por lista

Implementando modelo de domínio (Relacionamentos entre tabelas - classe de associação):

Primeiramente, vamos criar a segunda entidada, se será a GameList:

	package com.devsuperior.dslist.entities;

	import java.util.Objects;

	import jakarta.persistence.Entity;
	import jakarta.persistence.GeneratedValue;
	import jakarta.persistence.GenerationType;
	import jakarta.persistence.Id;
	import jakarta.persistence.Table;

	@Entity
	@Table(name = "tb_game_list")
	public class GameList {

		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private Long id;
		private String name;
		
		public GameList(){
			
		}
		
		public GameList(Long id, String name) {
			this.id = id;
			this.name = name;
		}

		public Long getId() {
			return id;
		}
		public String getName() {
			return name;
		}
		public void setId(Long id) {
			this.id = id;
		}
		public void setName(String name) {
			this.name = name;
		}

		@Override
		public int hashCode() {
			return Objects.hash(id);
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			GameList other = (GameList) obj;
			return Objects.equals(id, other.id);
		}	
	}

Criando tabela de associação (que terá a referência para o id do game (chave estrangeira) e para o id do gamelist (chave estrangeira). Na tabela benonging os dois serão chaves primárias): 

A grosso modo, SERIA assim:

	package com.devsuperior.dslist.entities;

	public class Belonging {
		
		private Game game;
		private GameList list;
		
		private Integer position;

	}

Mas temos um problema: No nosso repository, precisamos ter apenas 1 tipo para o id, pois só aceita uma chave primária, então desse jeito não conseguiriamos fazer a referência. Para contornar este problema, vamos criar outra classe auxiliar, que fará esta referência. A classe será a BelongingPK. Aqui configuraremos as chaves estrangeiras

Notations:

	@Embeddable /*Para dizer no belonging que estes dois campos serão 1 atributo*/
	@ManyToOne //Tipo do relacionamento - Informar em cada uma das chaves estrangeiras
	@JoinColumn(name = "game_id") //Chave estrangeira 01
	@JoinColumn(name = "list_id") //Chave estrangeira 02

classe BelongingPK:

	package com.devsuperior.dslist.entities;

	import java.util.Objects;

	import jakarta.persistence.Embeddable;
	import jakarta.persistence.JoinColumn;
	import jakarta.persistence.ManyToOne;

	@Embeddable /*Para dizer no belonging que estes dois campos serão 1 atributo*/
	public class BelongingPK {

		@ManyToOne //Tipo do relacionamento
		@JoinColumn(name = "game_id") //Chave estrangeira 01
		private Game game;
		
		@ManyToOne
		@JoinColumn(name = "list_id") //Chave estrangeira 02
		private GameList list;
		
		public BelongingPK() {
		}

		public BelongingPK(Game game, GameList list) {
			this.game = game;
			this.list = list;
		}

		public Game getGame() {
			return game;
		}

		public GameList getList() {
			return list;
		}

		public void setGame(Game game) {
			this.game = game;
		}

		public void setList(GameList list) {
			this.list = list;
		}

		@Override
		public int hashCode() {
			return Objects.hash(game, list);
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			BelongingPK other = (BelongingPK) obj;
			return Objects.equals(game, other.game) && Objects.equals(list, other.list);
		}
	}

Agora com isso, a classe Beonging corrigida ficará assim:

Notations:

	@Entity
	@Table(name = "tb_belonging")
	@EmbeddedId

Classe Belonging:

	package com.devsuperior.dslist.entities;

	import java.util.Objects;

	import jakarta.persistence.EmbeddedId;
	import jakarta.persistence.Entity;
	import jakarta.persistence.Table;

	@Entity
	@Table(name = "tb_belonging")
	public class Belonging {
		
		@EmbeddedId //Para fazer referência a BelongingPK
		private BelongingPK id = new BelongingPK();
		
		private Integer position;
		
		public Belonging() {
		}

		public Belonging(Game game, GameList list, Integer position) {
			id.setGame(game);
			id.setList(list);
			this.position = position;
		}

		public BelongingPK getId() {
			return id;
		}

		public Integer getPosition() {
			return position;
		}

		public void setId(BelongingPK id) {
			this.id = id;
		}

		public void setPosition(Integer position) {
			this.position = position;
		}

		@Override
		public int hashCode() {
			return Objects.hash(id);
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Belonging other = (Belonging) obj;
			return Objects.equals(id, other.id);
		}
	}

Agora com tudo pronto, resta fazer o seeding com os registros no import.sql

Vamos agora criar o GameDTO  e o endpoind da busca por id:

Por que criar um GameDTO, se por padrão sem DTO já retorna todas os registros do game?

	1. Porque estamos seguindo uma padronização, e para facilitar o entendimento e manutenção, fazemos isso
	2. Em determinadas ocasiões, a falta de um DTO pode dar um erro de looping de informações, então fazemos o DTO para evitar problemas


Dica para copiar objetos grande (construtor - DTO):

	public GameDTO(Game entity) {
		BeanUtils.copyProperties(entity, this); /*Ao invés de passar 1 por 1, essa função faz isso (os nomes tem que ser os mesmos)*/
	}

NOTA: Para isso funcionar, o DTO deve ter gets e sets

DTO GameDTO:

	package com.devsuperior.dslist.dto;

	import org.springframework.beans.BeanUtils;

	import com.devsuperior.dslist.entities.Game;

	public class GameDTO {

		private Long id;
		private String title;
		private Integer year;
		private String genre;
		private String platforms;
		private Double score;
		private String imgUrl;
		private String shortDescription;
		private String longDescription;
		
		public GameDTO() {
		}
		
		public GameDTO(Game entity) {
			BeanUtils.copyProperties(entity, this); /*Ao invés de passar 1 por 1, essa função faz isso (os nomes tem que ser os mesmos)*/
		}

		public Long getId() {
			return id;
		}

		public String getTitle() {
			return title;
		}

		public Integer getYear() {
			return year;
		}

		public String getGenre() {
			return genre;
		}

		public String getPlatforms() {
			return platforms;
		}

		public Double getScore() {
			return score;
		}

		public String getImgUrl() {
			return imgUrl;
		}

		public String getShortDescription() {
			return shortDescription;
		}

		public String getLongDescription() {
			return longDescription;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		public void setYear(Integer year) {
			this.year = year;
		}

		public void setGenre(String genre) {
			this.genre = genre;
		}

		public void setPlatforms(String platforms) {
			this.platforms = platforms;
		}

		public void setScore(Double score) {
			this.score = score;
		}

		public void setImgUrl(String imgUrl) {
			this.imgUrl = imgUrl;
		}

		public void setShortDescription(String shortDescription) {
			this.shortDescription = shortDescription;
		}

		public void setLongDescription(String longDescription) {
			this.longDescription = longDescription;
		}
	}

Service com o DTO de games:

Notations: 

	@org.springframework.transaction.annotation.Transactional(readOnly = true) //Para dizer que é somente de leitura, para otimizar

Service GameService:

	package com.devsuperior.dslist.services;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;

	import com.devsuperior.dslist.dto.GameDTO;
	import com.devsuperior.dslist.dto.GameMinDTO;
	import com.devsuperior.dslist.entities.Game;
	import com.devsuperior.dslist.repositories.GameRepository;

	import jakarta.transaction.Transactional;

	@Service //Ou @Component
	public class GameService {
		
		@Autowired //Para injetar uma instancia do game repository
		private GameRepository gameRepository;
		
		@org.springframework.transaction.annotation.Transactional(readOnly = true) //Para dizer que é somente de leitura, para otimizar
		public GameDTO findById(Long id) {
			Game result = gameRepository.findById(id).get(); //O .get() é para pegar o dado, pois o findById puro, retorna um Opcional
			GameDTO dto = new GameDTO(result);
			return dto;
		}
		
		@org.springframework.transaction.annotation.Transactional(readOnly = true)
		public List<GameMinDTO> findAll() {
			//Pegamos todos os games
			List<Game> result = gameRepository.findAll(); //Recebe tudo do bd
			
			//Tratando nosso resultado, resumindo as informações para nosso dto
			List<GameMinDTO> dto = result.stream().map(x -> new GameMinDTO(x)).toList();
			return dto;
		}
	}

Rota para pegar o id via url (GameController):

	@GetMapping("/{id}")
	public GameDTO findById(@PathVariable Long id) { //Para dizer que este id é o mesmo id da url
		GameDTO result = gameService.findById(id);
		return result;
	}


Criando o endpoind /lists:

Vamos criar o DTO, a interface Repository, o service e o controller, tudo do GameList

Controller:

	package com.devsuperior.dslist.controllers;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;

	import com.devsuperior.dslist.dto.GameListDTO;
	import com.devsuperior.dslist.services.GameListService;

	@RestController
	@RequestMapping(value = "/lists")
	public class GameListController {

		@Autowired
		private GameListService gameListService;
		
		@GetMapping
		public List<GameListDTO> findAll() {
			List<GameListDTO> result = gameListService.findAll();
			return result;
		}
		
	}

Queries customizadas no repository:

Quero buscar games de uma lista específica. Para isso, temos a query:

	SELECT tb_game.id, tb_game.title, tb_game.game_year AS `year`, tb_game.img_url AS imgUrl,
	tb_game.short_description AS shortDescription, tb_belonging.position
	FROM tb_game
	INNER JOIN tb_belonging ON tb_game.id = tb_belonging.game_id
	WHERE tb_belonging.list_id = :listId
	ORDER BY tb_belonging.position

Como posso adicionar esta query no meu repository?

colando no repository( dentro das {}):

	@Query(nativeQuery = true, value = """ // nativeQuery = true serve para dizer que estamos passando uma query sql
			SELECT tb_game.id, tb_game.title, tb_game.game_year AS `year`, tb_game.img_url AS imgUrl,
			tb_game.short_description AS shortDescription, tb_belonging.position
			FROM tb_game
			INNER JOIN tb_belonging ON tb_game.id = tb_belonging.game_id
			WHERE tb_belonging.list_id = :listId //O parâmetro do método, para ser dinâmico
			ORDER BY tb_belonging.position
				""")

	List<GameMinProjection> searchByList(Long listId); //Nome do método que vai realizar a query acima

Notations:

	@Query(nativeQuery = true, value = """ AQUI VAI A QUERY SQL """) // nativeQuery = true serve para dizer que estamos passando uma query sql

O que é esta projection?

Quando usamos o nativeQuery (para dizer que vamos usar sql), o resultado desta consulta deve ser uma interface, que no spring chamamos de projection

O que tem na projection?

Métodos get, correspondentes a consulta

Vamos criar a projection (GameMinProjection), no pacote .projections

Repository com query personalizada:

	package com.devsuperior.dslist.repositories;

	import java.util.List;

	import org.springframework.data.jpa.repository.JpaRepository;
	import org.springframework.data.jpa.repository.Query;

	import com.devsuperior.dslist.entities.Game;
	import com.devsuperior.dslist.projections.GameMinProjection;

	public interface GameRepository extends JpaRepository<Game, Long>{
		
		@Query(nativeQuery = true, value = """
				SELECT tb_game.id, tb_game.title, tb_game.game_year AS `year`, tb_game.img_url AS imgUrl,
				tb_game.short_description AS shortDescription, tb_belonging.position
				FROM tb_game
				INNER JOIN tb_belonging ON tb_game.id = tb_belonging.game_id
				WHERE tb_belonging.list_id = :listId
				ORDER BY tb_belonging.position
					""")
		List<GameMinProjection> searchByList(Long listId);
	}

Projection:

	package com.devsuperior.dslist.projections;

	public interface GameMinProjection {

		Long getId();
		String getTitle();
		Integer getYear();
		String getImgUrl();
		String getShortDesctiption();
		Integer getPosition();
		
	}

Criando agora este endpoind (/lists/1/games):

Como é uma consulta que retorna games, o service será o game service

Para poder criar retornar um dto de games, preciso adicionar no meu GameDTO um construtor que receba uma projection:

	public GameMinDTO(GameMinProjection projection) { //Irei instanciar a partir de um obj game
		this.id = projection.getId();
		this.title = projection.getTitle();
		this.year = projection.getYear();
		this.imgUrl = projection.getImgUrl();
		this.shortDescription = projection.getShortDesctiption();
	}

Service:

	@org.springframework.transaction.annotation.Transactional(readOnly = true)
	public List<GameMinDTO> findByList(Long listId) {
		List<GameMinProjection> result = gameRepository.searchByList(listId);
		List<GameMinDTO> dto = result.stream().map(x -> new GameMinDTO(x)).toList();
		return dto;
	}

Controller (GameListController):

	package com.devsuperior.dslist.controllers;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;

	import com.devsuperior.dslist.dto.GameListDTO;
	import com.devsuperior.dslist.dto.GameMinDTO;
	import com.devsuperior.dslist.services.GameListService;
	import com.devsuperior.dslist.services.GameService;

	@RestController
	@RequestMapping(value = "/lists")
	public class GameListController {

		@Autowired
		private GameListService gameListService;
		
		@Autowired
		private GameService gameService;
		
		@GetMapping
		public List<GameListDTO> findAll() {
			List<GameListDTO> result = gameListService.findAll();
			return result;
		}
		
		@GetMapping(value = "/{listId}/games")
		public List<GameMinDTO> findByList(@PathVariable Long listId){
			List<GameMinDTO> result = gameService.findByList(listId);
			return result;
		}
	}

O que você aprendeu:

• Relacionamentos N-N
• Classe de associação, embedded id
• Consultas SQL no Spring Data JPA
• Projections












































Aula 03: