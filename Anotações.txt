Criar projeto: https://start.spring.io/
Maven e java 17

Dependências: Spring Web, JPA (para mecher com banco de dados), h2 (banco de dados em memória), postgreSql (bd para implantar na nuvem)

Lib maven: Colar no pom.xml (dps, botão direito na pasta root, maven, update e marca o force update)

	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-resources-plugin</artifactId>
		<version>3.1.0</version> <!--$NO-MVN-MAN-VER$ -->
	</plugin>


Configurando o arquivo application.properties:

	spring.profiles.active=${APP_PROFILE:test}
	spring.jpa.open-in-view=false

	cors.origins=${CORS_ORIGINS:http://localhost:5173,http://localhost:3000}

Fazendo ORM:

Perfil de testes (Configurações do banco de dados de teste (H2)):

Criando o application-test.properties:

	# H2 Connection
	spring.datasource.url=jdbc:h2:mem:testdb
	spring.datasource.username=sa
	spring.datasource.password=

	# H2 Client
	spring.h2.console.enabled=true
	spring.h2.console.path=/h2-console

	# Show SQL
	spring.jpa.show-sql=true
	spring.jpa.properties.hibernate.format_sql=true

Criando classe Game (entidade) no pacote entities (src/main/java):

Notations usadas (para importar, damos ctrl + shift + o):

	@Entity
	@Table(name = 'tb_game')
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "game_year") //Para que no banco, o nome não fique year, pois dá conflito
	@Column(columnDefinition = "TEXT") //Para dizer que não vai ser vaschar, e sim text

Classe:

	package com.devsuperior.dslist.entities;

	import java.util.Objects;

	import jakarta.persistence.Column;
	import jakarta.persistence.Entity;
	import jakarta.persistence.GeneratedValue;
	import jakarta.persistence.GenerationType;
	import jakarta.persistence.Id;
	import jakarta.persistence.Table;

	@Entity
	@Table(name = "tb_game")
	public class Game {
		
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private Long id;
		private String title;
		
		@Column(name = "game_year") //Para que no banco, o nome não fique year, pois dá conflito
		
		private Integer year;
		private String genre;
		private String platforms;
		private Double score;
		private String imgUrl;
		
		@Column(columnDefinition = "TEXT") //Para dizer que não vai ser vaschar, e sim text
		private String shortDescription;
		
		@Column(columnDefinition = "TEXT") //Para dizer que não vai ser vaschar, e sim text
		private String longDescription;
		
		public Game() {}

		public Game(Long id, String title, Integer year, String genre, String platforms, Double score, String imgUrl,
				String shortDescription, String longDescription) {
			this.id = id;
			this.title = title;
			this.year = year;
			this.genre = genre;
			this.platforms = platforms;
			this.score = score;
			this.imgUrl = imgUrl;
			this.shortDescription = shortDescription;
			this.longDescription = longDescription;
		}

		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		public Integer getYear() {
			return year;
		}

		public void setYear(Integer year) {
			this.year = year;
		}

		public String getGenre() {
			return genre;
		}

		public void setGenre(String genre) {
			this.genre = genre;
		}

		public String getplatforms() {
			return platforms;
		}

		public void setplatforms(String platforms) {
			this.platforms = platforms;
		}

		public Double getScore() {
			return score;
		}

		public void setScore(Double score) {
			this.score = score;
		}

		public String getImgUrl() {
			return imgUrl;
		}

		public void setImgUrl(String imgUrl) {
			this.imgUrl = imgUrl;
		}

		public String getshortDescription() {
			return shortDescription;
		}

		public void setshortDescription(String shortDescription) {
			this.shortDescription = shortDescription;
		}

		public String getLongDescription() {
			return longDescription;
		}

		public void setLongDescription(String longDescription) {
			this.longDescription = longDescription;
		}
		
		//Compara se os games são iguais ou não
		
		@Override
		public int hashCode() {
			return Objects.hash(id);
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Game other = (Game) obj;
			return Objects.equals(id, other.id);
		}
		
	}

Acessando o banco h2: http://localhost:8080/h2-console

Fazendo seed (semeando o banco de dados):

resources/import.sql

	INSERT INTO tb_game (title, score, game_year, genre, platforms, img_url, short_description, long_description) VALUES ('Mass Effect Trilogy', 4.8, 2012, 'Role-playing (RPG), Shooter', 'XBox, Playstation, PC', 'https://raw.githubusercontent.com/devsuperior/java-spring-dslist/main/resources/1.png', 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Odit esse officiis corrupti unde repellat non quibusdam! Id nihil itaque ipsum!', 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus dolorum illum placeat eligendi, quis maiores veniam. Incidunt dolorum, nisi deleniti dicta odit voluptatem nam provident temporibus reprehenderit blanditiis consectetur tenetur. Dignissimos blanditiis quod corporis iste, aliquid perspiciatis architecto quasi tempore ipsam voluptates ea ad distinctio, sapiente qui, amet quidem culpa.');

	INSERT INTO tb_game (title, score, game_year, genre, platforms, img_url, short_description, long_description) VALUES ('Red Dead Redemption 2', 4.7, 2018, 'Role-playing (RPG), Adventure', 'XBox, Playstation, PC', 'https://raw.githubusercontent.com/devsuperior/java-spring-dslist/main/resources/2.png', 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Odit esse officiis corrupti unde repellat non quibusdam! Id nihil itaque ipsum!', 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus dolorum illum placeat eligendi, quis maiores veniam. Incidunt dolorum, nisi deleniti dicta odit voluptatem nam provident temporibus reprehenderit blanditiis consectetur tenetur. Dignissimos blanditiis quod corporis iste, aliquid perspiciatis architecto quasi tempore ipsam voluptates ea ad distinctio, sapiente qui, amet quidem culpa.');

Vou criar uma classe mostrando somente alguns dados dos games, sem precisar mostrar tudo. Dados projetados. esta classe será um DTO (No pacote .dto):

Princípio básico:

	public GameMinDTO(Game entity) { //Irei instanciar a partir de um obj game
		this.id = entity.getId(); //O this é opcional, já que não tem parâmetros de nomes repetidos 
		this.title = entity.getTitle();
		this.year = entity.getYear();
		this.imgUrl = entity.getImgUrl();
		this.shortDescription = entity.getshortDescription();
	}

Só preciso de getters no DTO

Classe GameMinDTO:

	package com.devsuperior.dslist.dto;

	import com.devsuperior.dslist.entities.Game;

	public class GameMinDTO {
		
		private Long id;
		private String title;
		private Integer year;
		private String imgUrl;
		private String shortDescription;
		
		public GameMinDTO() {
		}

		public GameMinDTO(Game entity) { //Irei instanciar a partir de um obj game
			this.id = entity.getId();
			this.title = entity.getTitle();
			this.year = entity.getYear();
			this.imgUrl = entity.getImgUrl();
			this.shortDescription = entity.getshortDescription();
		}

		public Long getId() {
			return id;
		}

		public String getTitle() {
			return title;
		}

		public Integer getYear() {
			return year;
		}

		public String getImgUrl() {
			return imgUrl;
		}

		public String getShortDescription() {
			return shortDescription;
		}
		
	}

